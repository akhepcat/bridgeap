#/bin/bash

### BEGIN INIT INFO
# Provides:		bridgeap
# Required-Start:	$remote_fs $syslog
# Required-Stop:	$remote_fs $syslog
# Default-Start:	2 3 4 5
# Default-Stop:		0 1 6
# Short-Description:	interface bridging (eth|wifi)<>(eth|wifi)
### END INIT INFO

PROG="${0##*/}"
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
VERSION="1.0"
GITV=0

test -z "${BASH_SOURCE}" && exec bash "$0" "$1"

[[ -r /lib/lsb/init-functions ]] && test run_by_init && . /lib/lsb/init-functions

## this code snippet is taken from Dan Dascalescu's response on
## http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]
do
	# resolve $SOURCE until the file is no longer a symlink
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	# if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
PDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd -P )"
## end

SED="sed --follow-symlinks -i"

#############################

do_exit() {
        STATUS=${1:-0}
        REASON="${2}"

        [[ -n "${REASON}" ]] && do_echo "${REASON}"

	run_by_init && log_end_msg ${STATUS}

	exit ${STATUS}
}

# Are we running from init?
run_by_init() {
	if [ -n "${previous}" -a -n "${runlevel}" ]
	then
		return 0
	else
		return 1
	fi
}

do_echo() {
	MSG="$*"
	run_by_init && log_action_msg "${MSG}" || echo "${MSG}"
}

auto_update() {
	cd ${PDIR} && git diff -s --exit-code 
	if [ $? -eq 0 ]
	then
		# up to date, so
		return 0
	elif [ $? -eq 1 ]
	then
		if [ -r ${PDIR}/.git/index ]
		then
			# we updated, need to reload
			git pull
			exec ${PDIR}/${PROG}
		fi
	else
		do_exit 1 "Couldn't auto-update"
	fi
}

precheck() {

	[[ -z "$(which ip)" ]] && FAIL=1 && echo "ERROR: package iproute2 not installed"
	[[ -z "$(which dhcpd)" ]] && FAIL=1 && echo "ERROR: package isc-dhcp-server not installed"
	[[ -z "$(which hostapd)" ]] && FAIL=1 && echo "ERROR: package hostapd not installed"
	[[ -z "$(which ifconfig)" ]] && FAIL=1 && echo "ERROR: package net-tools not installed"
	[[ -z "$(which iwconfig)" ]] && FAIL=1 && echo "ERROR: package wireless-tools not installed"
	[[ -z "$(which iptables)" ]] && FAIL=1 && echo "ERROR: package iptables not installed"

	[[ ${FAIL:-0} -gt 0 ]] && do_exit 1 "${PROG} - Prerequsites not found"
}


cfgcheck() {
	# Check for bad configurations with legacy support, warn with new variable name

	if [ -n "${BRIDGEAP_CONF}" -a -z "${BRIDGEAP_HOSTAP}" ];	# Old busted variable
	then
		echo "Update your config file and change BRIDGEAP_CONF to BRIDGEAP_HOSTAP to avoid this warning"
		BRIDGEAP_HOSTAP=${BRIDGEAP_CONF}			# new hotness
	fi

	if [ -z "${BRIDGEAP_HOSTAP}" -o ! -r "${BRIDGEAP_HOSTAP}" ];
	then
		FAIL=1
		echo "can't read hostap config file: ${BRIDGEAP_HOSTAP}"
	fi

	if [ -z "${BRIDGEAP_DHCP}" -o ! -r "${BRIDGEAP_DHCP}" ];
	then
		FAIL=1
		echo "can't read dhcp-server config file: ${BRIDGEAP_DHCP}"
	fi

	[[ ${FAIL:-0} -gt 0 ]] && do_exit 1 "Configuration errors encountered"
}

unmanage_interface() {

	if [[ -s /etc/NetworkManager/NetworkManager.conf ]]
	then
	        UNMANAGED=$(fgrep unmanaged-devices /etc/NetworkManager/NetworkManager.conf)
		KEYFILE=$(fgrep "[keyfile]" /etc/NetworkManager/NetworkManager.conf)

		if [[ -z "${KEYFILE}" ]]
		then
			echo "[keyfile]" >> /etc/NetworkManager/NetworkManager.conf
			echo "unmanaged-devices=mac:${MAC}" >> /etc/NetworkManager/NetworkManager.conf

		elif [[ -z "$(fgrep ${MAC} /etc/NetworkManager/NetworkManager.conf)" ]]
		then
	                ${SED} "s/\(unmanaged-devices\)=.*/\1=mac:${MAC}/" /etc/NetworkManager/NetworkManager.conf
		else
			return
		fi

		# if we've touched anything, we need to restart NetworkManager
		service network-manager restart
	fi
	if [ -n "$(grep "^iface default inet dhcp" /etc/network/interfaces)" ]
	then
		# disable default-dhcp on all interfaces (otherwise we could
		# try to get a dhcp-address on a managed interface, because bugs
		${SED} "s/^\(iface default inet dhcp\)/#\1/" /etc/network/interfaces
	fi
	if [ -n "$(pgrep ifplugd)" ]
	then
		/etc/init.d/ifplugd stop ${INSIDE}
	fi
	if [ -n "$(pgrep wpa_wupplicant)" ]
	then
		wpa_action ${INSIDE} stop
	fi

}

dhcpd_reconf() {
	if [[ -n "${BRIDGEAP_NET}" ]]
	then
		${SED} "s/^subnet.*netmask.*/subnet ${BRIDGEAP_NET} netmask 255.255.255.0 {/" ${BRIDGEAP_DHCP}
		${SED} "s/range.*/range ${BRIDGEAP_NET%0}5 ${BRIDGEAP_NET%0}250;/" ${BRIDGEAP_DHCP}
		${SED} "s/\(broadcast-address\).*/\1 ${BRIDGEAP_NET%0}255;/" ${BRIDGEAP_DHCP}
		${SED} "s/routers.*/routers ${BRIDGEAP_NET%0}1;/" ${BRIDGEAP_DHCP}
		${SED} "s/\(fixed-address\).*/\1 ${BRIDGEAP_NET%0}1;/" ${BRIDGEAP_DHCP}
	fi
	[[ -n "${DNS_IPS}" ]] && ${SED} "s/\(domain-name-servers\).*/\1 ${DNS_IPS};/" ${BRIDGEAP_DHCP}
	[[ -n "${MAC}" ]] && ${SED} "s/\(ethernet\).*/\1 ${MAC};/" ${BRIDGEAP_DHCP}

	[[ -d /etc/apparmor.d/dhcpd.d ]] && \
		echo "${BRIDGEAP_DHCP} r," > /etc/apparmor.d/dhcpd.d/bridgeap && \
		echo "${BRIDGEAP_DHCP_PIDF} lmkwr," >> /etc/apparmor.d/dhcpd.d/bridgeap && \
			service apparmor restart
}

hostapd_reconf() {
	[[ -n "${WPA_CHANNEL}" ]] && ${SED} "s/\(channel\)=.*/\1=${WPA_CHANNEL}/" ${BRIDGEAP_HOSTAP}
	[[ -n "${WPA_PASS}" ]] && ${SED} "s/\(wpa_passphrase\)=.*/\1=${WPA_PASS}/" ${BRIDGEAP_HOSTAP}
	[[ -n "${SSID}" ]] && ${SED} "s/\(ssid\)=.*/\1=${SSID}/" ${BRIDGEAP_HOSTAP}
}


start() {
	[[ "${INSIDE}" = "${OUTSIDE}" ]] && do_exit 1 "Conflicting interface configuration"

	MSG="Starting ${PROG} interface bridging"
	run_by_init && log_daemon_msg "${MSG}" "${PROG}" || echo "${MSG}"

        dhcpd_reconf
	unmanage_interface

        if [ -n "${WIFI}" -a -z "$( pgrep -f ${BRIDGEAP_HOSTAP##*/} )" ]
        then
                hostapd_reconf

                # update the config for the 'current' wifi interface
                ${SED} "s/interface=wlan.*/interface=${WIFI}/" ${BRIDGEAP_HOSTAP}
		ifconfig ${WIFI} up
                if [[ ${IGNORE_MODE:-0} -eq 0 ]]
		then
			iwconfig ${WIFI} mode Master || do_exit 1 "failed to set Master mode"
		fi
                hostapd -B ${BRIDGEAP_HOSTAP} 2>/dev/null || do_exit 1 "Failed to start hostapd on interface ${WIFI}, aborting"
	else
	        ip link set dev ${INSIDE} up
        fi

        ip -4 addr add dev ${INSIDE} ${BRIDGEAP_NET%0}1/24 broadcast ${BRIDGEAP_NET%0}255

        [[ -r ${BRIDGEAP_LEASES} ]] || touch ${BRIDGEAP_LEASES}

	DHCP_VER=$( dhcpd -h 2>&1 | head -1 | sed 's/[a-z .]//ig')

	[[ -z "${DHCP_VER}" ]] && do_exit 1 "can't determine dhcpd version"

	if [[ ${DHCP_VER} -gt 422 ]]
	then
		DUSER="-user ${DHCP_USER}"
		DGROUP="-group ${DHCP_GROUP}"
	fi

        [[ -z "$( pgrep -f \"dhcpd.*${INSIDE}\" )" ]] &&  \
		dhcpd  \
			-4 ${DUSER} ${DGROUP} \
			-cf ${BRIDGEAP_DHCP} -lf ${BRIDGEAP_LEASES} \
			-pf ${BRIDGEAP_DHCP_PIDF} ${INSIDE}

	[[ $? -eq 0 ]] || do_exit 1 "dhcp server failed to start"

	iptables -A FORWARD -i ${INSIDE} -o ${OUTSIDE} -m conntrack --ctstate NEW -j ACCEPT
	iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	iptables -t nat -A POSTROUTING -s ${BRIDGEAP_NET}/24 -o ${OUTSIDE} -j MASQUERADE

	echo 1 >/proc/sys/net/ipv4/conf/all/forwarding
}

stop() {
	echo 0 >/proc/sys/net/ipv4/conf/all/forwarding

	check_inside
	check_outside

	[[ -z "${INSIDE}" ]] && do_exit 1 "Can't find active inside interface"

	MSG="Stopping ${PROG} interface bridging"
	run_by_init && log_daemon_msg "${MSG}" "${PROG}" || echo "${MSG}"
	
        iptables -D FORWARD -i ${INSIDE} -o ${OUTSIDE} -m conntrack --ctstate NEW -j ACCEPT
        iptables -D FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
        iptables -t nat -D POSTROUTING -s ${BRIDGEAP_NET}/24 -o ${OUTSIDE} -j MASQUERADE


	PID=$( pgrep -f "dhcpd.*${INSIDE}" )
	[[ -s ${BRIDGEAP_DHCP_PIDF} ]] && FPID=$(cat ${BRIDGEAP_DHCP_PIDF})
	[[ -n "${FPID}" ]] && PID=${FPID}

	[[ -n "${PID}" ]] && kill -9 ${PID}

	#disable hostapd, if it's running, and use that running status to tell us to unconfig the wifi interface
	PID=$( pgrep -f ${BRIDGEAP_HOSTAP##*/} )
	if [ -n "${PID}" -a ${IGNORE_MODE:-0} -eq 0 ]
	then
		iwconfig ${INSIDE} mode Managed
	fi
	[[ -n "${PID}" ]] && kill -9 ${PID}

	ifconfig ${INSIDE} 0.0.0.0 down
}

check_inside() {
	INSIDE="$(ip -4 route show ${BRIDGEAP_NET}/24 | sed 's/^.*dev[[:space:]]*\([a-z0-9]*\)[[:space:]]*.*$/\1/g' )"
}

check_outside() {
	ROUTE="$(ip -4 route show default scope global | grep -v "dev[[:space:]]*br" )" # ignore bridges
	DEFROUTE=${ROUTE##*dev }
	OUTSIDE=${DEFROUTE%% *}
}

prestart() {
	GITV=$(cd $PDIR && git show --pretty=format:"%h" -s 2>/dev/null)

	check_outside

	if [[ ${SPIN_UNTIL_UP} -ge 2 ]]
	then
		if [[ -z "${OUTSIDE}" ]]
		then
			sleep ${SPIN_UNTIL_UP}
			check_outside
		fi
	elif [[ ${SPIN_UNTIL_UP} -eq 1 ]]
	then
		# loop forever until we're up!  Check every 5 seconds...
		while [[ -z "${OUTSIDE}" ]]
		do
			sleep 5
			check_outside
		done
	# else
	#	no-op
	fi

	[[ -z "${OUTSIDE}" ]] && do_exit 1 "No network connectivity, aborting"

	if [ -n "${AUTO_UPDATE}" -a ${AUTO_UPDATE:-0} -eq 1 ]; then auto_update; fi

	# First look for any WiFi interfaces...
	WIFIS=$(iwconfig 2>&1| grep -v extensions | grep '^[a-z0-9]' | awk '{print $1}' | grep -v ${OUTSIDE} )

	[[ 1 -eq ${AVOID_DOWN:-0} ]] && AVOID_DOWN="NO.CARRIER|"
	ETHS="$(ip link show | grep -vE "${AVOID_DOWN}master" | grep -E '\d*:[[:space:]]*eth' | cut -f 2 -d: | awk '{print $1}' | grep -v ${OUTSIDE} | head -1 )"	# ignore the OUTSIDE interface, but list all others


	# automagically decide if we're wifi->wifi, wifi->eth, or eth->wifi, as much as possible, ignoring bridges
	ROUTED_IFS="$(ip route show scope link | grep -v ${OUTSIDE} | sed 's/^.*dev[[:space:]]*\([a-z0-9]*\)[[:space:]]*.*$/\1/g' | sort -u)"  # get a list of internal interfaces with active routes

	for RIF in ${ROUTED_IFS}
	do
		# remove any interfaces that match an active routing interface
		WIFIS="${WIFIS//$RIF}"
		ETHS="${ETHS//$RIF}"
	done
	NUM_WIFIS=( ${WIFIS} )
	NUM_WIFIS=${#NUM_WIFIS[@]}
	NUM_ETHS=( ${ETHS} )
	NUM_ETHS=${#NUM_ETHS[@]}

	if [ ${NUM_WIFIS} -eq 0 -a ${NUM_ETHS} -eq 0 ]
	then
		do_exit 1 "no internal interface available, aborting"
	fi

	if [ ${NUM_WIFIS} -gt 0 -a ${NUM_ETHS} -gt 0 ]
	then
		do_exit 1 "both wifi and eth are available, can't auto-decide. aborting"
	fi

	[[ ${NUM_WIFIS} -gt 1 ]] && do_exit 1 "Too many available WIFI interfaces for automagic determination"
	[[ ${NUM_ETHS} -gt 1 ]] && do_exit 1 "Too many available ETH interfaces for automagic determination"

	WIFI=${WIFIS}
	INSIDE="${WIFI}${ETHS}"

	MAC="$(ip link show ${INSIDE} | grep ether | awk '{print $2}')"
}


################################

# Make sure we have all the required packages installed
precheck

GITV=${GITV:-0}

if [[ -r "/etc/bridgeap/bridgeap.conf" ]]
then
        . /etc/bridgeap/bridgeap.conf

elif [[ -r "/etc/bridgeap.conf" ]]
then
        . /etc/bridgeap.conf

elif [[ -r "${PDIR}/bridgeap.conf" ]]
then
        . ${PDIR}/bridgeap.conf
else
        do_exit 1 "You must create a bridgeap.conf file in ${PDIR}, /etc/, or /etc/bridgeap/"
fi

cfgcheck

case $1 in
        start) prestart && start
                ;;
        stop) stop
                ;;
        restart|reload) stop; sleep 2; start
                ;;
	update) auto_update
		;;
        *) prestart ;
	   echo "usage: ${PROG} [start|stop|restart|reload|update" ;
	   echo -e "\t\t version: ${VERSION}.${GITV}" ;
	   echo -e "\t\t bridges outside (${OUTSIDE}) to inside (${INSIDE})";
                ;;
esac

do_exit
