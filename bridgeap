#/bin/sh
PROG="${0##*/}"
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd -P )"

DO_RETURN=${SHLVL}

SED="sed --follow-symlinks -i"

do_exit()
{
        STATUS=${1:-0}
        REASON=${2}

        [[ -n "${REASON}" ]] && echo "${REASON}"

        if [ ${DO_RETURN} -eq 1 ];
        then
                return $STATUS
        else
                exit $STATUS
        fi
}

unmanage_interface() {
        UNMANAGED=$(fgrep unmanaged-devices /etc/NetworkManager/NetworkManager.conf)
	KEYFILE=$(fgrep "[keyfile]" /etc/NetworkManager/NetworkManager.conf)

	if [ -z "${KEYFILE}" ] 
	then
		echo "[keyfile]" >> /etc/NetworkManager/NetworkManager.conf
		echo "unmanaged-devices=mac:${MAC}" >> /etc/NetworkManager/NetworkManager.conf

	elif [ -z "$(fgrep ${MAC} /etc/NetworkManager/NetworkManager.conf)" ]
	then
                ${SED} "s/\(unmanaged-devices\)=.*/\1=mac:${MAC}/" /etc/NetworkManager/NetworkManager.conf
	else
		return
	fi

	service network-manager restart
}

dhcpd_reconf() {
	if [ -n "${BRIDGEAP_NET}" ]
	then
		${SED} "s/^subnet.*netmask.*/subnet ${BRIDGEAP_NET} netmask 255.255.255.0 {/" ${BRIDGEAP_DHCP}
		${SED} "s/range.*/range ${BRIDGEAP_NET%0}5 ${BRIDGEAP_NET%0}250;/" ${BRIDGEAP_DHCP}
		${SED} "s/\(broadcast-address\).*/\1 ${BRIDGEAP_NET%0}255;/" ${BRIDGEAP_DHCP}
		${SED} "s/routers.*/routers ${BRIDGEAP_NET%0}1;/" ${BRIDGEAP_DHCP}
		${SED} "s/\(fixed-address\).*/\1 ${BRIDGEAP_NET%0}1;/" ${BRIDGEAP_DHCP}
	fi
	[[ -n "${DNS_IPS}" ]] && ${SED} "s/\(domain-name-servers\).*/\1 ${DNS_IPS};/" ${BRIDGEAP_DHCP}
	[[ -n "${MAC}" ]] && ${SED} "s/\(ethernet\).*/\1 ${MAC};/" ${BRIDGEAP_DHCP}

}

hostapd_reconf() {
	[[ -n "${WPA_CHANNEL}" ]] && ${SED} "s/\(channel\)=.*/\1=${WPA_CHANNEL}/" ${BRIDGEAP_CONF}
	[[ -n "${WPA_PASS}" ]] && ${SED} "s/\(wpa_passphrase\)=.*/\1=${WPA_PASS}/" ${BRIDGEAP_CONF}
	[[ -n "${SSID}" ]] && ${SED} "s/\(ssid\)=.*/\1=${SSID}/" ${BRIDGEAP_CONF}
}

#############################

start() {
	if [ "${INSIDE}" = "${OUTSIDE}" ]
	then
                echo "Conflicting interface configuration"
                do_exit 1
        fi

        dhcpd_reconf

        if [ -n "${WIFI}" -a -z "$( pgrep -f ${BRIDGEAP_CONF##*/} )" ]
        then
                unmanage_interface
                hostapd_reconf

                # update the config for the 'current' wifi interface
                ${SED} "s/interface=wlan.*/interface=${WIFI}/" ${BRIDGEAP_CONF}
                iwconfig ${WIFI} mode Master || do_exit 1 "failed to set Master mode"
                hostapd -B ${BRIDGEAP_CONF} || do_exit 1 "Failed to start hostapd on interface ${WIFI}, aborting"
        fi

        ip -4 addr add dev ${INSIDE} ${BRIDGEAP_GW}
        ip link set dev ${INSIDE} up

        if [ ! -r ${BRIDGEAP_LEASES} ]
        then
                touch ${BRIDGEAP_LEASES}
        fi

        [[ -z "$( pgrep -f \"dhcpd.*${INSIDE}\" )" ]] &&  /usr/sbin/dhcpd  \
			-4 -user ${DHCP_USER} -group ${DHCP_GROUP} \
			-cf ${BRIDGEAP_DHCP} -lf ${BRIDGEAP_LEASES} \
			-pf ${BRIDGEAP_DHCP_PIDF} ${INSIDE}

	[[ $? -eq 0 ]] || do_exit 1 "dhcp server failed to start"

	iptables -A FORWARD -i ${INSIDE} -o ${OUTSIDE} -m conntrack --ctstate NEW -j ACCEPT
	iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	iptables -t nat -A POSTROUTING -s ${BRIDGEAP_NET}/24 -o ${OUTSIDE} -j MASQUERADE

	echo 1 >/proc/sys/net/ipv4/conf/all/forwarding
}

stop() {
	echo 0 >/proc/sys/net/ipv4/conf/all/forwarding

        iptables -D FORWARD -i ${INSIDE} -o ${OUTSIDE} -m conntrack --ctstate NEW -j ACCEPT
        iptables -D FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
        iptables -t nat -D POSTROUTING -s ${BRIDGEAP_NET}/24 -o ${OUTSIDE} -j MASQUERADE

	PID=$( pgrep -f ${BRIDGEAP_CONF##*/} )
	if [ -n "${PID}" ]
	then
		kill -9 ${PID}
	fi

	PID=$( pgrep -f "dhcpd.*${INSIDE}" )
	if [ -n "${PID}" ]
	then
		kill -9 ${PID}
	fi

	[[ -n "${WIFI}" ]] && iwconfig ${WIFI} mode Managed
	ifconfig ${INSIDE} 0.0.0.0 down
}


################################

if [ -r "${PDIR}/bridgeap.conf" ]
then
        . ${PDIR}/bridgeap.conf
else
        do_exit 1 "You must create a bridgeap.conf file in ${PDIR}"
fi

BRIDGEAP_GW="${BRIDGEAP_NET%0}1"

ROUTE="$(ip -4 route show default scope global | grep -v "dev[[:space:]]*br" )" # ignore bridges
DEFROUTE=${ROUTE##*dev }
OUTSIDE=${DEFROUTE%% *}

[[ -z "${OUTSIDE}" ]] && do_exit 1 "No network connectivity, aborting"

# First look for any WiFi interfaces...
WIFI=$(iwconfig 2>&1| grep -v extensions | grep '^[a-z0-9]' | awk '{print $1}' | grep -v ${OUTSIDE} )

# automagically decide if we're wifi->wifi, wifi->eth, or eth->wifi, as much as possible, ignoring bridges
ETH="$(ip link show | grep -vE "NO.CARRIER|master" | grep -E '\d*:[[:space:]]*eth' | cut -f 2 -d: | awk '{print $1}' | grep -v ${OUTSIDE} | head -1 )"	# ignore the OUTSIDE interface, but list all others

if [ -z "${WIFI}" -a -z "${ETH}" ]
then
	do_exit 1 "no internal interface available, aborting"
fi

NUM_ETHS="${ETH//[^\ ]} "
NUM_ETHS=${#NUM_ETHS}
ROUTED_IFS="$(ip route show scope link | grep -v ${OUTSIDE} | sed 's/^.*dev[[:space:]]*\([a-z0-9]*\)[[:space:]]*.*$/\1/g' | sort -u)"  # get a list of internal interfaces with active routes

if [ -n "${WIFI}" -a -n "${ETH}" ]
then
	do_exit 1 "both wifi and eth are available, can't auto-decide. aborting"
fi


INSIDE="${WIFI}${ETH}"

MAC="$(ip link show ${INSIDE} | grep ether | awk '{print $2}')"

case $1 in
        start) start
                ;;
        stop) stop
                ;;
        restart|reload) stop; sleep 2; start
                ;;
        *)
echo "usage: ${PROG} [start|stop|restart|reload" ;
echo -e "\t\t bridges outside (${OUTSIDE}) to inside (${INSIDE})";
                ;;
esac

do_exit

